import api from './morphikApi';

export interface GraphQuery {
  query?: string;
  filters?: Record<string, any>;
  limit?: number;
  domain?: string;
}

export interface Node {
  id: string;
  label: string;
  type: string;
  properties: Record<string, any>;
}

export interface Edge {
  id: string;
  source: string;
  target: string;
  label: string;
  properties?: Record<string, any>;
}

export interface Graph {
  nodes: Node[];
  edges: Edge[];
}

export interface DomainInfo {
  id: string;
  name: string;
  description: string;
  nodeCount: number;
  edgeCount: number;
}

export const knowledgeGraphApi = {
  // Get graph data based on query
  getGraphData: async (params: GraphQuery): Promise<Graph> => {
    return api.post<{ graph: Graph }>('/knowledge-graph/query', params)
      .then(data => data.graph);
  },

  // Get available domains for knowledge graphs
  getDomains: async (): Promise<DomainInfo[]> => {
    return api.get<{ domains: DomainInfo[] }>('/knowledge-graph/domains')
      .then(data => data.domains);
  },

  // Get entity details
  getEntityDetails: async (entityId: string): Promise<Node> => {
    return api.get<{ entity: Node }>(`/knowledge-graph/entity/${entityId}`)
      .then(data => data.entity);
  },

  // Get relationships for an entity
  getEntityRelationships: async (entityId: string): Promise<Edge[]> => {
    return api.get<{ relationships: Edge[] }>(`/knowledge-graph/entity/${entityId}/relationships`)
      .then(data => data.relationships);
  },

  // Execute a graph query using natural language
  executeNLQuery: async (question: string, domain?: string): Promise<{
    answer: string;
    graph: Graph;
  }> => {
    return api.post<{
      answer: string;
      graph: Graph;
    }>('/knowledge-graph/nl-query', {
      question,
      domain
    });
  }
};

export default knowledgeGraphApi;
