import React, { useState } from 'react';
import {
  Box,
  Container,
  Heading,
  Text,
  Input,
  Button,
  VStack,
  HStack,
  SimpleGrid,
  Card,
  CardBody,
  Divider,
  Badge,
  useColorModeValue,
  Spinner,
  Flex,
  Icon,
} from '@chakra-ui/react';
import { FaSearch, FaBook, FaFilePdf, FaFileAlt } from 'react-icons/fa';
import { manualApi, SearchResult } from '../api';

const ManualSearchPage: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [results, setResults] = useState<SearchResult[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSearch = async () => {
    if (!searchQuery.trim()) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      const searchResults = await manualApi.search({
        query: searchQuery
      });
      
      setResults(searchResults);
    } catch (err) {
      console.error('Search error:', err);
      setError('An error occurred while searching. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  return (
    <Container maxW="container.xl" py={8}>
      <VStack spacing={8} align="stretch">
        <Box textAlign="center">
          <Heading as="h1" size="xl" mb={2}>
            BNext ERP Manual Search
          </Heading>
          <Text color={useColorModeValue("gray.600", "gray.400")}>
            Search through BNext ERP documentation to find what you need
          </Text>
        </Box>

        <Box
          bg={useColorModeValue('white', 'gray.800')}
          boxShadow="base"
          borderRadius="lg"
          p={6}
        >
          <HStack>
            <Input
              placeholder="Search BNext ERP manuals..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onKeyDown={handleKeyDown}
              size="lg"
              flex={1}
            />
            <Button
              leftIcon={<FaSearch />}
              colorScheme="brand"
              size="lg"
              onClick={handleSearch}
              isLoading={isLoading}
              loadingText="Searching..."
            >
              Search
            </Button>
          </HStack>
        </Box>

        {error && (
          <Box
            p={4}
            bg={useColorModeValue('red.50', 'red.900')}
            color={useColorModeValue('red.500', 'red.200')}
            borderRadius="md"
          >
            {error}
          </Box>
        )}

        {isLoading ? (
          <Flex justify="center" py={8}>
            <Spinner size="xl" thickness="4px" color="brand.500" />
          </Flex>
        ) : results.length > 0 ? (
          <Box>
            <Heading as="h2" size="md" mb={4}>
              Search Results ({results.length})
            </Heading>
            <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>
              {results.map((result) => (
                <ResultCard key={result.id} result={result} />
              ))}
            </SimpleGrid>
          </Box>
        ) : searchQuery.trim() ? (
          <Box textAlign="center" py={8}>
            <Icon as={FaSearch} w={12} h={12} color="gray.400" mb={4} />
            <Text>No results found. Try a different search query.</Text>
          </Box>
        ) : null}
      </VStack>
    </Container>
  );
};

interface ResultCardProps {
  result: SearchResult;
}

const ResultCard: React.FC<ResultCardProps> = ({ result }) => {
  const getIcon = () => {
    switch (result.type) {
      case 'pdf':
        return FaFilePdf;
      case 'manual':
        return FaBook;
      default:
        return FaFileAlt;
    }
  };

  return (
    <Card boxShadow="md" borderRadius="lg" overflow="hidden">
      <CardBody>
        <HStack mb={2}>
          <Icon as={getIcon()} color="brand.500" boxSize={5} />
          <Badge colorScheme="brand" fontSize="sm">
            {result.type}
          </Badge>
          <Badge colorScheme={result.score > 0.8 ? "green" : "yellow"} fontSize="sm">
            {Math.round(result.score * 100)}%
          </Badge>
        </HStack>
        
        <Heading size="md" mb={2}>
          {result.title}
        </Heading>
        
        <Text noOfLines={3} mb={4} color="gray.600">
          {result.content}
        </Text>
        
        <Divider mb={3} />
        
        <Button size="sm" colorScheme="brand" variant="outline" width="full">
          View Document
        </Button>
      </CardBody>
    </Card>
  );
};

export default ManualSearchPage;
